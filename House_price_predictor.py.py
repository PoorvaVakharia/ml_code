# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zkvphr28s9zfdXJWGd1tKGtNIxIXodO4
"""

# This code was generated using Gitub Co-Pilot (Promt below)
# write a machin learning code usig python to predict a house price using a random forest generator from a given csv file which contains features and predicted price. Use the fit features separately. Use the trained model to predict the price of a house from a new data set which contains the same features as the training set. draw the graph of training and predicted prices.


# The input file was generated using the co-pilot (features were provided)
# The new dataset was provided to the model

# By Poorva Vakharia
# Aug 2025

##########################################################################################
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
import matplotlib.pyplot as plt
# Load the dataset
data = pd.read_csv('synthetic_housing_data.csv')
# Separate features and target variable
X = data.drop('price', axis=1)
y = data['price']
# Convert categorical features to numerical using one-hot encoding
X = pd.get_dummies(X, drop_first=True)
# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Create and train the Random Forest model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
# Predict prices on the test set
y_pred = model.predict(X_test)
# Predict prices on a new dataset
new_data = pd.read_csv('synthetic_house_prices-3.csv')
y_new_price = new_data['price']

new_data = pd.get_dummies(new_data, drop_first=True)
# Ensure the new data has the same features as the training set
new_data = new_data.reindex(columns=X_train.columns, fill_value=0)
# Predict prices for the new data
new_predictions = model.predict(new_data)
# Plotting the training and predicted prices
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='blue', label='Predicted Prices')
plt.scatter(y_test, y_test, color='red', label='Actual Prices')
plt.title('Actual vs Predicted House Prices')
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.legend()
plt.grid()
plt.show()

# Save the model for future use
#import joblib
#joblib.dump(model, 'house_price_model.pkl')
# Load the model later using:
# model = joblib.load('house_price_model.pkl')

import numpy as np
# Save predictions to a CSV file
predictions_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
predictions_df.to_csv('house_price_predictions.csv', index=False)
# Save new predictions to a CSV file
new_predictions_df = pd.DataFrame({'New Predictions': new_predictions})
new_predictions_df.to_csv('new_house_price_predictions.csv', index=False)
# Print the first few rows of the predictions
print(predictions_df.head())
print(new_predictions_df.head())
y_new_pred = new_predictions_df['New Predictions']
diff_price = y_new_pred - y_new_price
print("Newly predicted prices is off by:", diff_price)
diff_percent = diff_price / y_new_price * 100
print("Newly predicted prices is off by:", np.round(diff_percent,2))

# Print the model's feature importances
print("Feature Importances:")
print(model.feature_importances_)
# Print the model's score on the test set
print("Model Score on Test Set:", model.score(X_test, y_test))
# Print the model's score on the training set
print("Model Score on Training Set:", model.score(X_train, y_train))
# Print the number of trees in the model
print("Number of trees in the model:", model.n_estimators)
# Print the model's parameters
print("Model Parameters:")
print(model.get_params())
# Print the shape of the training and test sets
print("Shape of Training Set:", X_train.shape)
print("Shape of Test Set:", X_test.shape)
# Print the shape of the new data
print("Shape of New Data:", new_data.shape)
# Print the first few rows of the new predictions
print("New Predictions:")
print(new_predictions_df.head())
# Print the first few rows of the training set
print("Training Set Features:")
print(X_train.head())
# Print the first few rows of the test set
print("Test Set Features:")
print(X_test.head())
# Print the first few rows of the original dataset
print("Original Dataset:")
print(data.head())
# Print the first few rows of the new dataset
print("New Dataset:")
print(new_data.head())
# Print the model's training time
import time
start_time = time.time()
model.fit(X_train, y_train)
end_time = time.time()
print("Model Training Time: {:.2f} seconds".format(end_time - start_time))
# Print the model's prediction time
start_time = time.time()
new_predictions = model.predict(new_data)
end_time = time.time()

print("Model Prediction Time: {:.2f} seconds".format(end_time - start_time))
# Print the model's accuracy on the training set
print("Model Accuracy on Training Set: {:.2f}%".format(model.score(X_train, y_train) * 100))
# Print the model's accuracy on the test set
print("Model Accuracy on Test Set: {:.2f}%".format(model.score(X_test, y_test) * 100))
# Print the number of features used in the model
print("Number of Features Used in the Model:", X_train.shape[1])
# Print the feature names used in the model
print("Feature Names Used in the Model:")
print(X_train.columns.tolist())
# Print the first few rows of the predictions DataFrame
print("Predictions DataFrame:")
print(predictions_df.head())
# Print the first few rows of the new predictions DataFrame
print("New Predictions DataFrame:")
print(new_predictions_df.head())
# Print the model's hyperparameters
print("Model Hyperparameters:")
print(model.get_params())
# Print the model's training and testing scores
print("Training Score:", model.score(X_train, y_train))
print("Testing Score:", model.score(X_test, y_test))
# Print the model's feature importances
print("Feature Importances:")
print(model.feature_importances_)
# Print the model's predictions for the new dataset
print("Predictions for New Dataset:")
print(new_predictions)
# Print the model's predictions for the test set
print("Predictions for Test Set:")
print(y_pred)
# Print the model's predictions for the training set
print("Predictions for Training Set:")
y_train_pred = model.predict(X_train)
print(y_train_pred)
# Print the model's predictions for the new dataset
print("Predictions for New Dataset:")
print(new_predictions)
# Print the model's predictions for the test set
print("Predictions for Test Set:")
print(y_pred)
# Print the model's predictions for the training set
print("Predictions for Training Set:")
print(y_train_pred)
# Print the model's predictions for the new dataset
print("Predictions for New Dataset:")
print(new_predictions)
# Print the model's predictions for the test set
print("Predictions for Test Set:")
print(y_pred)
# Print the model's predictions for the training set
print("Predictions for Training Set:")
print(y_train_pred)