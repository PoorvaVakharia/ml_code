# -*- coding: utf-8 -*-
"""house_price_predicter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fyli8kDwEm5tS63At5rd6H3M23uU4e3C
"""

import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

# Load dataset
df = pd.read_csv("synthetic_housing_data.csv")
print("\nOriginal Dataframe last row:")
print(df.tail(1))

last_row_df = df.tail(1).copy() # Using .copy() ensures it's a separate DataFrame

print("\nExtracted Last Row DataFrame:")
print(last_row_df)

# Delete the last row from the original DataFrame
df.drop(df.index[-1], inplace=True)

print("\nOriginal DataFrame after deleting the last row:")
print(df.tail)

# Features and target
X = df.drop("price", axis=1)
y = df["price"]

# Identify categorical and numerical columns
categorical_features = ["zip_code", "home_type"]
numerical_features = [col for col in X.columns if col not in categorical_features]

# Preprocessing pipeline
preprocessor = ColumnTransformer([
    ("num", StandardScaler(), numerical_features),
    ("cat", OneHotEncoder(drop="first"), categorical_features)
])

# Full pipeline with model
model_pipeline = Pipeline([
    ("preprocessing", preprocessor),
    ("regressor", RandomForestRegressor(n_estimators=100, random_state=42))
])

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print(X_test)

# Train the model
model_pipeline.fit(X_train, y_train)

# Predict and evaluate
y_pred = model_pipeline.predict(X_test)
print(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

#depths1 = range(1, 21)
#train_accuracies = []
#test_accuracies = []

print(f"Model trained successfully!")
print(f"Mean Squared Error: {mse:,.2f}")
print(f"R^2 Score: {r2:.4f}")

import joblib

# Save the trained pipeline
joblib.dump(model_pipeline, "house_price_model.pkl")
print("üíæ Model saved as 'house_price_model.pkl'")

import pandas as pd

# Load the trained model
model = joblib.load("house_price_model.pkl")

df_new = pd.read_csv('synthetic_housing_data-1.csv')

# üîπ Step 8: Predict house prices
predicted_prices = model_pipeline.predict(df_new)

# üîπ Step 9: Output predictions
df_new["predicted_price"] = predicted_prices
print("\nüè† Predicted Prices for New Data:")
print(df_new[["predicted_price"]].head())

print(last_row_df)

X1 = last_row_df.drop("price", axis=1)
y1 = last_row_df["price"]
#print(X1)
#X1_train, X1_test, y1_train, y1_test = train_test_split(X1, y1, test_size=1, random_state=20)
#print(X1_test)
#print(y1_test)

# Train the model
model.fit(X1, y1)

y_pred1 = model.predict(X1)

print(y_pred1)